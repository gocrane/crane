package dsp

import (
	"fmt"
	"net/http"
	"testing"

	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/components"
	"github.com/go-echarts/go-echarts/v2/opts"
	"github.com/go-echarts/go-echarts/v2/types"
	"github.com/stretchr/testify/assert"
)

// Run this test to see the actual time series (black) and two forecasting time series
// that are generated by FFT (blue) and MaxValue (green) estimators respectively.
func TestFftEstimator_GetEstimation(t *testing.T) {
	var origSignal, _ = readCsvFile("test_data/input0.csv")
	assert.Equal(t, 1440*8, len(origSignal.Samples))

	s := make([]*Signal, 3)

	s[0] = &Signal{
		SampleRate: origSignal.SampleRate,
		Samples:    origSignal.Samples[1440*7:],
	}

	origSignal = &Signal{
		SampleRate: origSignal.SampleRate,
		Samples:    origSignal.Samples[:1440*7],
	}
	assert.Equal(t, Day, origSignal.FindPeriod())

	e1 := &fftEstimator{marginFraction: 0.1}
	s[1] = e1.GetEstimation(origSignal, Day)

	e2 := &maxValueEstimator{marginFraction: 0.1}
	s[2] = e2.GetEstimation(origSignal, Day)

	x := make([]string, 0)
	for i := 0; i < s[0].Num(); i++ {
		x = append(x, fmt.Sprintf("%.1f", float64(i)/s[0].SampleRate))
	}

	line := charts.NewLine()
	line.SetGlobalOptions(
		charts.WithInitializationOpts(opts.Initialization{Width: "3000px", Theme: types.ThemeWonderland}))
	line.SetXAxis(x)

	var colors = []string{"black", "blue", "green"}

	for i := 0; i < 3; i++ {
		y := make([]opts.LineData, 0)
		for j := 0; j < s[i].Num(); j++ {
			y = append(y, opts.LineData{Value: s[i].Samples[j], Symbol: "none"})
		}
		line.AddSeries("s", y, charts.WithAreaStyleOpts(
			opts.AreaStyle{
				Color:   colors[i],
				Opacity: 0.1,
			}),
			charts.WithLineStyleOpts(opts.LineStyle{Color: colors[i]}))
	}

	http.HandleFunc("/", func(w http.ResponseWriter, _ *http.Request) {
		if err := components.NewPage().AddCharts(line).Render(w); err != nil {
			// nothing to do
			t.Error(err)
		}
	})
	fmt.Println("Open your browser and access 'http://localhost:7001'")
	//http.ListenAndServe(":7001", nil)
}
